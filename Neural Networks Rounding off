import numpy as np
import random as random
#To create input labels to train the model
X=np.array([np.zeros(1000)])
for x in range(0,1000):
    X[0,x]=random.randint(0,94)
print(X.shape)


#To create Output labels to train the model
y=np.array([np.zeros(1000)])
for i in range(0,1000):
    if X[0,i]<5:
        y[0,i]=0
    elif X[0,i]>=5 and X[0,i]<=10:
        y[0,i]=1
    else:
        a=X[0,i]%10
        if a<5:
            b=X[0,i]//10
        else:
            b=(X[0,i]//10)+1
        y[0,i]=b
print(y.shape)



import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import SparseCategoricalCrossentropy
from matplotlib import pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split

#Making the machine learn the pattern
X=X.reshape(-1,1)
y=y.reshape(-1,1)
X_train, X_test, y_train, y_test =train_test_split(X,y, test_size=0.2)
layer_1=Dense(units=1000, activation='relu')
layer_2=Dense(units=500, activation='relu')
layer_3=Dense(units=250, activation='relu')
layer_4=Dense(units=10, activation='softmax')



model=Sequential(
    [layer_1, layer_2, layer_3, layer_4]
)

model.compile(optimizer=Adam(learning_rate=0.01),loss=SparseCategoricalCrossentropy())
model.fit(X_train,y_train, epochs=1000)
pred=model.predict(X_test)


yhat=[]
for j in range(0,200):
    for i in range(0,10):
        if pred[j,i]==max(pred[j,:]):
            yhat.append(i)
print(yhat)
print(y_test)


for i in range(0,200):
    if y_test[i]!=yhat[i]:
        print(y_test[i], yhat[i])
